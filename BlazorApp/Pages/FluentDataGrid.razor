@page "/fluent_datagrid"
@inject HttpClient Http
@using System.Net.Http.Json
@using BlazorApp.Shared
@using BlazorApp.Models

<PageTitle>Weather forecast - FluentDataGrid</PageTitle>

<h3>Weather forecast - FluentDataGrid</h3>
<p>This component demonstrates fetching data from the file.</p>

@*読込件数設定、読み込み*@
<div class="d-inline-flex flex-wrap mt-1 align-items-baseline mt-4">
  <FluentNumberField @bind-Value="_dispNumber" Min="5" Max="40000" Step="1000">読込件数</FluentNumberField>
  <FluentButton Appearance="Appearance.Accent" Disabled="@(_loading)" @onclick="ProcessSomething">
    @(_loading ? "取得中" : "読込")
  </FluentButton>
</div>
@if (_items == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <Microsoft.Fast.Components.FluentUI.FluentDataGrid RowsData="@Queryable.AsQueryable(_items)" TGridItem="WeatherForecast">
    <Microsoft.Fast.Components.FluentUI.PropertyColumn Property="@(p => p!.Date)" Sortable="true" />
    <Microsoft.Fast.Components.FluentUI.PropertyColumn Property="@(p => p!.TemperatureC)" Sortable="true" />
    <Microsoft.Fast.Components.FluentUI.PropertyColumn Property="@(p => p!.TemperatureF)" Sortable="true" />
    <Microsoft.Fast.Components.FluentUI.PropertyColumn Property="@(p => p!.Summary)" Sortable="true" />
  </Microsoft.Fast.Components.FluentUI.FluentDataGrid>

  <FluentPaginator State="@_pagination" />

}

@code {
  bool _loading = true;
  int _dispNumber { get; set; } = 1000;
  PaginationState _pagination = new PaginationState { ItemsPerPage = 10 };
  IEnumerable<WeatherForecast>? _items = new List<WeatherForecast>();

  protected override async Task OnInitializedAsync()
  {
    _loading = true;
    _items = await Http.GetFromJsonAsync<List<WeatherForecast>>("sample-data/weather.json");
    _loading = false;
  }

  async Task ProcessSomething()
  {
    _loading = true;
    _items = new List<WeatherForecast>();
    await Task.Delay(300);
    await Task.Yield();

    string fileName = _dispNumber switch
    {
      <= 5 => "sample-data/weather.json",
      <= 1000 => "sample-data/weather1000.json",
      <= 5000 => "sample-data/weather5000.json",
      <= 10000 => "sample-data/weather10000.json",
      <= 20000 => "sample-data/weather20000.json",
      _ => "sample-data/weather40000.json"
    };
    _items = (await Http.GetFromJsonAsync<List<WeatherForecast>>(fileName))!.Take(_dispNumber);
    _loading = false;
  }

}